name: Deploy

on:
#   push:
    # branches: [ main ]
  release:
    types: [ published ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run tests
      run: |
        uv run pytest tests/ -v

    - name: Build Docker image
      run: |
        docker build -t loglass-server:${{ github.sha }} .
        docker tag loglass-server:${{ github.sha }} loglass-server:latest

    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      if: github.event_name == 'release'
      run: |
        docker tag loglass-server:latest ${{ secrets.DOCKER_USERNAME }}/loglass-server:${{ github.ref_name }}
        docker tag loglass-server:latest ${{ secrets.DOCKER_USERNAME }}/loglass-server:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/loglass-server:${{ github.ref_name }}
        docker push ${{ secrets.DOCKER_USERNAME }}/loglass-server:latest

  release-notes:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate Release Notes
      run: |
        echo "## Changes in ${{ github.ref_name }}" >> release-notes.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md

    - name: Update Release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');

          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ github.event.release.id }},
            body: releaseNotes
          });
